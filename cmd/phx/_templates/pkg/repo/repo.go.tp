package repo

import (
	"log/slog"
	{{- if ne .Database "sqlite3"}}
	"os"
	{{- end}}

	"github.com/spf13/viper"
	{{- if eq .Database "mysql"}}
	_ "github.com/go-sql-driver/mysql"
	"github.com/go-rel/mysql"
	{{- else if eq .Database "pgsql"}}
	_ "github.com/lib/pq"
	"github.com/go-rel/postgres"
	{{- else if eq .Database "sqlite3"}}
	_ "github.com/mattn/go-sqlite3"
	"github.com/go-rel/sqlite3"
	{{- end}}
	"github.com/go-rel/rel"
	"github.com/DOVECYJ/phoenix/env"
)

var (
	adapter rel.Adapter
	Repo    rel.Repository
)
{{if eq .Database "mysql"}}
// Config your database repository
func ConfigRepo() {
	var dsn = "${db.username}:${db.password}@tcp(${db.host}:${db.port})/${db.database}?clientFoundRows=true&charset=utf8&parseTime=True&loc=Local"
	dsn = os.Expand(dsn, viper.GetString)
	if env.IsDev() {
		slog.Info("connect mysql", "dsn", dsn)
	}

	// initialize mysql adapter.
	adapter = mysql.MustOpen(dsn)

	// initialize rel's repo.
	Repo = rel.New(adapter)
}
{{else if eq .Database "pgsql"}}
// Config your database repository
func ConfigRepo() {
	var dsn = "postgres://${db.username}:${db.password}@${db.host}:${db.port}/${db.database}?sslmode=disable"
	dsn = os.Expand(dsn, viper.GetString)
	if env.IsDev() {
		slog.Info("connect postgres", "dsn", dsn)
	}

	// initialize postgres adapter.
	adapter = postgres.MustOpen(dsn)

	// initialize rel's repo.
	Repo = rel.New(adapter)
}
{{else if eq .Database "sqlite3"}}
// Config your database repository
func ConfigRepo() {
	dsn := viper.GetString("db.database")
	if env.IsDev() {
		slog.Info("connect sqlite3", "dsn", dsn)
	}
	// initialize sqlite3 adapter.
	adapter = sqlite3.MustOpen(dsn)

	// initialize rel's repo.
	Repo = rel.New(adapter)
}
{{end}}

// Close database connection
func CloseRepo() {
	if adapter == nil {
		return
	}
	adapter.Close()
	slog.Info("database adapter closed")
}